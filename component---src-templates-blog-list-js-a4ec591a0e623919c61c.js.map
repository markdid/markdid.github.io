{"version":3,"sources":["webpack:///./src/templates/blog-list.js","webpack:///./src/components/items-blog.js","webpack:///./src/components/pagination.js"],"names":["BlogList","render","query","this","props","datas","allMarkdownRemark","edges","length","id","className","title","data","pathContext","type","Fragment","React","Component","lang","BlogItem","componentDidMount","color","window","getComputedStyle","textSecondary","getPropertyValue","querySelector","setAttribute","fluid","node","frontmatter","image","childImageSharp","to","fields","slug","aria-label","style","opacity","description","ref","c","date","items","forEach","e","i","remove","push","key","numPages","listItems","currentPage","charAt","toUpperCase","slice"],"mappings":"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","file":"component---src-templates-blog-list-js-a4ec591a0e623919c61c.js","sourcesContent":["import React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../components/layout\";\r\nimport BlogItems from \"../components/items-blog\";\r\nimport SectionTitle from \"../components/sectiontitle\";\r\nimport Pagination from \"../components/pagination\";\r\nimport SEO from \"../components/seo\";\r\n\r\nclass BlogList extends React.Component {\r\n    render() {\r\n        const query = this.props.datas;\r\n        if (query.allMarkdownRemark.edges.length > 0) {\r\n            return (\r\n                <section id=\"blog\" className=\"container\">\r\n                    <div className=\"section-title\">\r\n                        <SectionTitle title=\"BLOG\" />\r\n                    </div>\r\n                    <BlogItems data={query} />\r\n                    <Pagination\r\n                        pathContext={this.props.pathContext}\r\n                        type=\"blog\"\r\n                    />\r\n                </section>\r\n            );\r\n        } else {\r\n            return <React.Fragment></React.Fragment>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default function({ data, pathContext }) {\r\n    return (\r\n        <Layout>\r\n            <SEO lang=\"en\" title=\"Blog\" />\r\n            <BlogList datas={data} pathContext={pathContext} />\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport const query = graphql`\r\n    query blogListPage($skip: Int!, $limit: Int!) {\r\n        allMarkdownRemark(\r\n            filter: { fileAbsolutePath: { regex: \"/blog/\" } }\r\n            sort: { fields: [frontmatter___date], order: DESC }\r\n            limit: $limit\r\n            skip: $skip\r\n        ) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    frontmatter {\r\n                        title\r\n                        description\r\n                        date\r\n                        image {\r\n                            publicURL\r\n                            childImageSharp {\r\n                                fluid(maxWidth: 1920) {\r\n                                    srcSet\r\n                                    ...GatsbyImageSharpFluid\r\n                                }\r\n                                id\r\n                            }\r\n                        }\r\n                    }\r\n                    fields {\r\n                        slug\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport Img from \"gatsby-image\";\r\nimport Date from \"./date\";\r\nimport { Calendar } from \"./icons\";\r\nimport \"../style/list-blog.less\";\r\n\r\nclass BlogItem extends React.Component {\r\n    componentDidMount() {\r\n        this.color = window\r\n            .getComputedStyle(this.textSecondary, null)\r\n            .getPropertyValue(\"color\");\r\n        const calendar = this.textSecondary.querySelector(\"path\");\r\n        calendar.setAttribute(\"fill\", this.color);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"item col s12 m6\">\r\n                <div className=\"box\">\r\n                    <div className=\"image\">\r\n                        <Img\r\n                            fluid={\r\n                                this.props.data.node.frontmatter.image\r\n                                    .childImageSharp.fluid\r\n                            }\r\n                        />\r\n                        <Link\r\n                            to={this.props.data.node.fields.slug}\r\n                            title={this.props.data.node.frontmatter.title}\r\n                            aria-label={this.props.data.node.frontmatter.title}\r\n                            className=\"overlay-link\"\r\n                            style={{ opacity: 0 }}\r\n                        >\r\n                            {this.props.data.node.frontmatter.title}\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <h3 className=\"text-primary\">\r\n                            <Link\r\n                                to={this.props.data.node.fields.slug}\r\n                                title={this.props.data.node.frontmatter.title}\r\n                            >\r\n                                {this.props.data.node.frontmatter.title}\r\n                            </Link>\r\n                        </h3>\r\n                        <p className=\"text-tertiary\">\r\n                            {this.props.data.node.frontmatter.description}\r\n                        </p>\r\n                        <p\r\n                            className=\"date text-secondary\"\r\n                            ref={c => (this.textSecondary = c)}\r\n                        >\r\n                            <span className=\"icon\">\r\n                                <Calendar />\r\n                            </span>\r\n                            <Date\r\n                                data={this.props.data.node.frontmatter.date}\r\n                            />\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default function(props) {\r\n    const data = props.data.allMarkdownRemark.edges;\r\n    let items = [];\r\n    data.forEach(function(e, i) {\r\n        if (props.remove && e.node.id === props.remove) return;\r\n        items.push(<BlogItem key={e.node.id} data={e} />);\r\n    });\r\n    return <div className=\"row\">{items}</div>;\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport { ChevronLeft, ChevronRight } from \"./icons\";\r\nimport \"../style/pagination.less\";\r\n\r\nexport default function({ pathContext, type }) {\r\n\r\n    if (pathContext.numPages > 1) {\r\n        let listItems = [];\r\n        for (let i = 1; i <= pathContext.numPages; i++) {\r\n            listItems.push(\r\n                <li\r\n                    className={i === pathContext.currentPage ? \"active\" : \"\"}\r\n                    key={\"PaginationItem\" + i}\r\n                >\r\n                    <Link\r\n                        to={\"/\" + type + \"/\" + (i === 1 ? \"\" : i)}\r\n                        title={\r\n                            type.charAt(0).toUpperCase() +\r\n                            type.slice(1) +\r\n                            \" - Page \" +\r\n                            i\r\n                        }\r\n                        key={\"PaginationItemA\" + i}\r\n                    >\r\n                        {i}\r\n                    </Link>\r\n                </li>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"pagination\">\r\n                <ul>\r\n                    {pathContext.currentPage !== 1 && (\r\n                        <li>\r\n                            <Link\r\n                                to={\r\n                                    \"/\" +\r\n                                    type +\r\n                                    \"/\" +\r\n                                    (pathContext.currentPage - 1 === 1\r\n                                        ? \"\"\r\n                                        : pathContext.currentPage - 1)\r\n                                }\r\n                                title=\"Previous Page\"\r\n                            >\r\n                                <span className=\"icon\">\r\n                                    <ChevronLeft />\r\n                                </span>\r\n                            </Link>\r\n                        </li>\r\n                    )}\r\n                    {listItems}\r\n                    {pathContext.currentPage !== pathContext.numPages && (\r\n                        <li>\r\n                            <Link\r\n                                to={\r\n                                    \"/\" +\r\n                                    type +\r\n                                    \"/\" +\r\n                                    (pathContext.currentPage + 1)\r\n                                }\r\n                                title=\"Next Page\"\r\n                            >\r\n                                <span className=\"icon\">\r\n                                    <ChevronRight />\r\n                                </span>\r\n                            </Link>\r\n                        </li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        );\r\n    } else {\r\n        return <React.Fragment></React.Fragment>;\r\n    }\r\n}\r\n"],"sourceRoot":""}